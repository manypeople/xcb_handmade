diff --git a/code/handmade_debug_interface.h b/code/handmade_debug_interface.h
index 9b2b83f..9be8ddb 100644
--- a/code/handmade_debug_interface.h
+++ b/code/handmade_debug_interface.h
@@ -82,6 +82,9 @@ struct debug_event
     };
 };
 
+
+#define MAX_STRING_LENGTH 256
+#define NUM_OF_STRINGS 2048
 struct debug_table
 {
     debug_event EditEvent;
@@ -95,6 +98,13 @@ struct debug_table
     // only need 1 bit to store which array we're using...
     u64 volatile EventArrayIndex_EventIndex;
     debug_event Events[2][16*65536];
+
+    // NOTE: need to store the concatenated strings, used in
+    // the TIMED_FUNCTION macro, so the debug collatation will be able to
+    // reference them at the end of the frame    
+    u32 maxStringSize = MAX_STRING_LENGTH;
+    u32 numOfStrings = NUM_OF_STRINGS;
+    char strings[NUM_OF_STRINGS][MAX_STRING_LENGTH];
 };
 
 extern debug_table *GlobalDebugTable;
@@ -123,8 +133,94 @@ u64 ArrayIndex_EventIndex = AtomicAddU64(&GlobalDebugTable->EventArrayIndex_Even
 #define TIMED_BLOCK__(GUID, Number, ...) timed_block TimedBlock_##Number(GUID, ## __VA_ARGS__)
 #define TIMED_BLOCK_(GUID, Number, ...) TIMED_BLOCK__(GUID, Number, ## __VA_ARGS__)
 #define TIMED_BLOCK(Name, ...) TIMED_BLOCK_(DEBUG_NAME(Name), __COUNTER__, ## __VA_ARGS__)
-#define TIMED_FUNCTION(...) TIMED_BLOCK_(DEBUG_NAME(__FUNCTION__), ## __VA_ARGS__)
 
+// NOTE: brute force work around because gcc defines __FUNCTION__ as a
+// variable instead of just treating __FUNCTION__ as a macro style
+// string replace
+//inline
+void
+JoinStrings(char *String1, char *String2, char *Result)
+{    
+    char *R = Result;
+    char *C = 0;
+    for(C = String1; *C != 0; ++C)
+    {
+        *R = *C;
+        ++R;
+    }
+    for(C = String2; *C != 0; ++C)
+    {
+        *R = *C;
+        ++R;
+    }
+    *R = 0;
+}
+
+inline u32
+StringHash(char *string)
+{
+    u32 result = 0;
+    for(char *C = string; *C != 0; ++C)
+    {
+        result = 65599*result + *C;
+    }
+    return result;
+}
+
+//inline
+void
+CopyString(char *String, char *Result)
+{
+    JoinStrings(String, "", Result);
+}
+
+u32 StringLength(char *String);
+
+// NOTE: check to see if NUM_OF_STRINGS is large enough to have no
+// collisions
+#define TEST_FOR_COLLISIONS 0
+#if TEST_FOR_COLLISIONS
+#include "stdio.h"
+b32 StringsAreEqual(char *A, char *B);
+#endif
+
+internal char *
+StoreName(char *DebugName, char * FunctionName)
+{
+    u32 DebugNameLength = StringLength(DebugName);
+    u32 FunctionNameLength = StringLength(FunctionName);
+    u32 DebugFunctionNameLength = DebugNameLength + FunctionNameLength + 1;
+    char DebugFunctionName[DebugFunctionNameLength] = {};
+    JoinStrings(DebugName, FunctionName, DebugFunctionName);
+    u32 stringBucket = StringHash(DebugFunctionName) % GlobalDebugTable->numOfStrings;
+    char *selectedString = GlobalDebugTable->strings[stringBucket];
+#if TEST_FOR_COLLISIONS
+    char stringCopy[256] = {};
+    if(*selectedString)
+    {
+        CopyString(selectedString, stringCopy);
+    }
+    if(!StringsAreEqual(DebugFunctionName, stringCopy))
+    {
+        printf("mismatch: %s, %s\n", DebugFunctionName, stringCopy);
+    }
+#endif
+    // NOTE: if there is a hash collision, we just use the
+    // previously stored string. because it is probably too expensive
+    // to compare strings for each TIMED_FUNCTION call, maybe it isn't,
+    // I couldn't see much difference in the game, with and without
+    // string compares at every TIMED_FUNCTION call
+    if(*selectedString == 0)
+    {
+        Assert(DebugFunctionNameLength < GlobalDebugTable->maxStringSize);
+        CopyString(DebugFunctionName, selectedString);
+    }
+    return selectedString;
+}
+#define TIMED_FUNCTION(...) char *DebugName = DEBUG_NAME(""); \
+    char *storedName = StoreName(DebugName, (char *)__FUNCTION__);   \
+    TIMED_BLOCK_(storedName, __COUNTER__, ## __VA_ARGS__)
+    
 #define BEGIN_BLOCK_(GUID) {RecordDebugEvent(DebugType_BeginBlock, GUID);}
 #define END_BLOCK_(GUID) {RecordDebugEvent(DebugType_EndBlock, GUID);}
 
@@ -231,9 +327,10 @@ internal void DEBUGEditEventData(char *GUID, debug_event *Event);
      } 
 #define DEBUG_NAMED_VALUE(Value)  \
 { \
-    RecordDebugEvent(DebugType_Unknown, __FUNCTION__ #Value);                              \
+    char *storedName = StoreName((char *)__FUNCTION__, #Value);   \
+    RecordDebugEvent(DebugType_Unknown, storedName); \
     DEBUGValueSetEventData(Event, Value, (void *)&(Value)); \
-} 
+}
 
 #define DEBUG_B32(Value)  \
 { \
diff --git a/code/handmade_opengl.cpp b/code/handmade_opengl.cpp
index fe4f041..3abb905 100644
--- a/code/handmade_opengl.cpp
+++ b/code/handmade_opengl.cpp
@@ -341,8 +341,8 @@ OpenGLRenderCommands(game_render_commands *Commands, game_render_prep *Prep,
             glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
                                    GL_TEXTURE_2D, TextureHandle,
                                    0);
-            GLenum Status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
-            Assert(Status == GL_FRAMEBUFFER_COMPLETE);
+            GLenum Status1 = glCheckFramebufferStatus(GL_FRAMEBUFFER);
+            Assert(Status1 == GL_FRAMEBUFFER_COMPLETE);
         }
         
         GlobalFramebufferCount = NewFramebufferCount;
@@ -359,7 +359,10 @@ OpenGLRenderCommands(game_render_commands *Commands, game_render_prep *Prep,
         
         if(TargetIndex == 0)
         {
-            glScissor(0, 0, WindowWidth, WindowHeight); 
+            // NOTE: workaround x11/xcb wrong reported window dimensions
+#define START_HEIGHT 1080
+            glScissor(0, (START_HEIGHT - GlobalWindowHeight),
+                      WindowWidth, WindowHeight); 
         }
         else
         {
diff --git a/code/handmade_shared.h b/code/handmade_shared.h
index 639410f..8c2164e 100644
--- a/code/handmade_shared.h
+++ b/code/handmade_shared.h
@@ -164,29 +164,29 @@ OutChar(format_dest *Dest, char Value)
 }
 
 inline u64
-ReadVarArgUnsignedInteger(u32 Length, va_list *ArgList)
+ReadVarArgUnsignedInteger(u32 Length, va_list ArgList)
 {
     u64 Result = 0;
     switch(Length)
     {
         case 1:
         {
-            Result = va_arg(*ArgList, u8);
+            Result = va_arg(ArgList, u32);
         } break;
         
         case 2:
         {
-            Result = va_arg(*ArgList, u16);
+            Result = va_arg(ArgList, u32);
         } break;
         
         case 4:
         {
-            Result = va_arg(*ArgList, u32);
+            Result = va_arg(ArgList, u32);
         } break;
         
         case 8:
         {
-            Result = va_arg(*ArgList, u64);
+            Result = va_arg(ArgList, u64);
         } break;
     }
     
@@ -194,7 +194,7 @@ ReadVarArgUnsignedInteger(u32 Length, va_list *ArgList)
 }
 
 inline s64
-ReadVarArgSignedInteger(u32 Length, va_list *ArgList)
+ReadVarArgSignedInteger(u32 Length, va_list ArgList)
 {
     u64 Temp = ReadVarArgUnsignedInteger(Length, ArgList);
     s64 Result = *(s64 *)&Temp;
@@ -202,19 +202,19 @@ ReadVarArgSignedInteger(u32 Length, va_list *ArgList)
 }
 
 inline f64
-ReadVarArgFloat(u32 Length, va_list *ArgList)
+ReadVarArgFloat(u32 Length, va_list ArgList)
 {
     f64 Result = 0;
     switch(Length)
     {
         case 4:
         {
-            Result = va_arg(*ArgList, f32);
+            Result = va_arg(ArgList, f64);
         } break;
         
         case 8:
         {
-            Result = va_arg(*ArgList, f64);
+            Result = va_arg(ArgList, f64);
         } break;
     }
     
@@ -351,67 +351,67 @@ FormatStringList(umm DestSize, char *DestInit, char *Format, va_list ArgList)
                     case 'd':
                     case 'i':
                     {
-                        s64 Value = ReadVarArgSignedInteger(IntegerLength, &ArgList);
+                        s64 Value = ReadVarArgSignedInteger(IntegerLength, ArgList);
                     } break;
                     
                     case 'u':
                     {
-                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, &ArgList);
+                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, ArgList);
                     } break;
                     
                     case 'o':
                     {
-                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, &ArgList);
+                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, ArgList);
                     } break;
                     
                     case 'x':
                     {
-                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, &ArgList);
+                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, ArgList);
                     } break;
                     
                     case 'X':
                     {
-                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, &ArgList);
+                        u64 Value = ReadVarArgUnsignedInteger(IntegerLength, ArgList);
                     } break;
                     
                     case 'f':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'F':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'e':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'E':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'g':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'G':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'a':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'A':
                     {
-                        f64 Value = ReadVarArgFloat(FloatLength, &ArgList);
+                        f64 Value = ReadVarArgFloat(FloatLength, ArgList);
                     } break;
                     
                     case 'c':
