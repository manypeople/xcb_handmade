diff --git a/code/handmade_opengl.cpp b/code/handmade_opengl.cpp
index f8978b6..8c738cf 100644
--- a/code/handmade_opengl.cpp
+++ b/code/handmade_opengl.cpp
@@ -751,7 +751,7 @@ CompileZBiasProgram(zbias_program *Result, b32x DepthPeel)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 130\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n"
                  "#define DepthPeel %d\n",
@@ -897,7 +897,7 @@ CompilePeelComposite(peel_composite_program *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 130\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n"
                  "#define DepthPeel %d\n",
@@ -981,7 +981,7 @@ CompileResolveMultisample(resolve_multisample_program *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n"
                  "#define DepthPeel %d\n"
@@ -1123,7 +1123,7 @@ CompileFinalStretch(final_stretch_program *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 130\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n",
                  OpenGL.ShaderSimTexWriteSRGB,
@@ -1166,7 +1166,7 @@ CompileFakeSeedLighting(fake_seed_lighting_program *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n");
+                 "#version 330\n");
     
     char *VertexCode = R"FOO(
     // Vertex code
@@ -1224,7 +1224,7 @@ CompileMultiLightUp(multigrid_light_up_program *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n");
+                 "#version 330\n");
     
     char *VertexCode = R"FOO(
     // Vertex code
@@ -1286,7 +1286,7 @@ CompileMultiLightDown(multigrid_light_down_program *Result)
     // TODO(casey): Multigrid down
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n");
+                 "#version 330\n");
 
 #if 0
     v3 ToCamera = CameraP - WorldP;
@@ -1663,13 +1663,13 @@ OpenGLChangeToSettings(game_render_settings *Settings)
         // and probably use sRGB8 for surface color?
         // And NPTex could probably be encoded in RGB8?
         Buf->FrontEmitTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         Buf->BackEmitTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         Buf->SurfaceColorTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         Buf->NPTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         
         // NOTE(casey): "Up" framebuffer
         glGenFramebuffers(1, &Buf->WriteAllFramebuffer);
@@ -2088,9 +2088,10 @@ OpenGLRenderCommands(game_render_commands *Commands,
 #if 1
     if(DebugSetup)
     {
+        glDisable(GL_SCISSOR_TEST);
         FakeSeedLighting(DebugSetup);
         ComputeLightTransport();
-        
+
         OpenGL.DebugLightBufferIndex = Clamp(0, OpenGL.DebugLightBufferIndex, OpenGL.LightBufferCount - 1);
         OpenGL.DebugLightBufferTexIndex = Clamp(0, OpenGL.DebugLightBufferTexIndex, 3);
         
@@ -2104,6 +2105,7 @@ OpenGLRenderCommands(game_render_commands *Commands,
                           DrawRegion.MaxX, DrawRegion.MaxY,
                           GL_COLOR_BUFFER_BIT,
                           GL_NEAREST);
+        glEnable(GL_SCISSOR_TEST);
     }
     glReadBuffer(GL_COLOR_ATTACHMENT0);
 #endif
diff --git a/code/handmade_world_mode.cpp b/code/handmade_world_mode.cpp
index 951b053..96de998 100644
--- a/code/handmade_world_mode.cpp
+++ b/code/handmade_world_mode.cpp
@@ -794,7 +794,7 @@ UpdateAndRenderWorld(game_state *GameState, game_mode_world *WorldMode, transien
         if(Input->AltDown && IsDown(Input->MouseButtons[PlatformMouseButton_Left]))
         {
             f32 RotationSpeed = 0.001f*Pi32;
-            WorldMode->DebugCameraOrbit += RotationSpeed*dMouseP.x;
+            WorldMode->DebugCameraOrbit -= RotationSpeed*dMouseP.x;
             WorldMode->DebugCameraPitch += RotationSpeed*dMouseP.y;
         }
         else if(Input->AltDown && IsDown(Input->MouseButtons[PlatformMouseButton_Middle]))
