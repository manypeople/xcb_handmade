diff --git a/code/handmade_opengl.cpp b/code/handmade_opengl.cpp
index 57fbb01..6446f06 100644
--- a/code/handmade_opengl.cpp
+++ b/code/handmade_opengl.cpp
@@ -803,7 +803,7 @@ CompileZBiasProgram(zbias_program *Result, b32x DepthPeel)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 130\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n"
                  "#define DepthPeel %d\n",
@@ -948,7 +948,7 @@ CompilePeelComposite(opengl_program_common *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 130\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n"
                  "#define DepthPeel %d\n",
@@ -1089,7 +1089,7 @@ CompileResolveMultisample(resolve_multisample_program *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n"
                  "#define DepthPeel %d\n"
@@ -1227,7 +1227,7 @@ CompileFinalStretch(opengl_program_common *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 130\n"
+                 "#version 330\n"
                  "#define ShaderSimTexWriteSRGB %d\n"
                  "#define ShaderSimTexReadSRGB %d\n",
                  OpenGL.ShaderSimTexWriteSRGB,
@@ -1270,7 +1270,7 @@ CompileFakeSeedLighting(fake_seed_lighting_program *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n");
+                 "#version 330\n");
     
     char *VertexCode = R"FOO(
     // Vertex code
@@ -1328,7 +1328,7 @@ CompileDepthPeelToLighting(opengl_program_common *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 130\n");
+                 "#version 330\n");
     
     char *VertexCode = R"FOO(
     // Vertex code
@@ -1400,7 +1400,7 @@ CompileMultiLightUp(opengl_program_common *Result)
 {
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n");
+                 "#version 330\n");
     
     char *VertexCode = R"FOO(
     // Vertex code
@@ -1459,7 +1459,7 @@ CompileMultiLightDown(multigrid_light_down_program *Result)
     // TODO(casey): Multigrid down
     char Defines[1024];
     FormatString(sizeof(Defines), Defines,
-                 "#version 150\n");
+                 "#version 330\n");
 
     
     char *VertexCode = R"FOO(
@@ -1802,13 +1802,13 @@ OpenGLChangeToSettings(game_render_settings *Settings)
         // and probably use sRGB8 for surface color?
         // And NPTex could probably be encoded in RGB8?
         Buf->FrontEmitTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         Buf->BackEmitTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         Buf->SurfaceColorTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         Buf->NPTex = FramebufferTexImage(
-            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGB32F);
+            GL_TEXTURE_2D, TexWidth, TexHeight, FilterType, GL_RGBA32F);
         
         // NOTE(casey): "Up" framebuffer
         glGenFramebuffers(1, &Buf->WriteAllFramebuffer);
diff --git a/code/handmade_world_mode.cpp b/code/handmade_world_mode.cpp
index a83e40f..244efca 100644
--- a/code/handmade_world_mode.cpp
+++ b/code/handmade_world_mode.cpp
@@ -821,7 +821,7 @@ UpdateAndRenderWorld(game_state *GameState, game_mode_world *WorldMode, transien
         if(Input->AltDown && IsDown(Input->MouseButtons[PlatformMouseButton_Left]))
         {
             f32 RotationSpeed = 0.001f*Pi32;
-            WorldMode->DebugCameraOrbit += RotationSpeed*dMouseP.x;
+            WorldMode->DebugCameraOrbit -= RotationSpeed*dMouseP.x;
             WorldMode->DebugCameraPitch += RotationSpeed*dMouseP.y;
         }
         else if(Input->AltDown && IsDown(Input->MouseButtons[PlatformMouseButton_Middle]))
